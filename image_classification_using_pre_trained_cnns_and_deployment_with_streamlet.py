# -*- coding: utf-8 -*-
"""Image Classification using pre-trained CNNs and Deployment with Streamlet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/104SrFx4N9ka7GGP5cplYlPDWsxbhKISa
"""

#Tool used -= chat-GPT



import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Load dataset (5 classes of flowers)
(train_ds, val_ds, test_ds), ds_info = tfds.load(
    'tf_flowers',
    split=['train[:70%]', 'train[70%:85%]', 'train[85%:]'],
    as_supervised=True,
    with_info=True
)

IMG_SIZE = 224
BATCH_SIZE = 32

def format_image(image, label):
    image = tf.image.resize(image, (IMG_SIZE, IMG_SIZE)) / 255.0
    return image, label

train_ds = train_ds.map(format_image).shuffle(1000).batch(BATCH_SIZE).prefetch(1)
val_ds = val_ds.map(format_image).batch(BATCH_SIZE).prefetch(1)
test_ds = test_ds.map(format_image).batch(BATCH_SIZE).prefetch(1)

def build_model(base_model):
    base_model.trainable = False
    model = tf.keras.Sequential([
        base_model,
        tf.keras.layers.GlobalAveragePooling2D(),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dropout(0.3),
        tf.keras.layers.Dense(5, activation='softmax')  # 5 flower classes
    ])
    return model

mobilenet_base = tf.keras.applications.MobileNetV2(input_shape=(224,224,3),
                                                    include_top=False,
                                                    weights='imagenet')
resnet_base = tf.keras.applications.ResNet50(input_shape=(224,224,3),
                                             include_top=False,
                                             weights='imagenet')
model_mobilenet = build_model(mobilenet_base)
model_resnet = build_model(resnet_base)

model_mobilenet.compile(optimizer='adam',
                        loss='sparse_categorical_crossentropy',
                        metrics=['accuracy'])

history = model_mobilenet.fit(train_ds, validation_data=val_ds, epochs=5)

# Save model
model_mobilenet.save("model_mobilenet.h5")

# Same for ResNet50
model_resnet.compile(optimizer='adam',
                     loss='sparse_categorical_crossentropy',
                     metrics=['accuracy'])

history_resnet = model_resnet.fit(train_ds, validation_data=val_ds, epochs=5)

model_resnet.save("model_resnet.h5")

# Accuracy & loss plots
def plot_history(history):
    plt.plot(history.history['accuracy'], label='accuracy')
    plt.plot(history.history['val_accuracy'], label='val_accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.legend()
    plt.grid(True)
    plt.show()

plot_history(history)

from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns

# Predict
y_true = []
y_pred = []

for images, labels in test_ds:
    preds = model_mobilenet.predict(images)
    y_true.extend(labels.numpy())
    y_pred.extend(np.argmax(preds, axis=1))

cm = confusion_matrix(y_true, y_pred)

# Confusion matrix
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# streamlit app
!pip install streamlit

import streamlit as st
import tensorflow as tf
from PIL import Image
import numpy as np

CLASS_NAMES = ['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']
model = tf.keras.models.load_model("model_mobilenet.h5")

def preprocess_image(img):
    img = img.resize((224, 224))
    img_array = tf.keras.preprocessing.image.img_to_array(img) / 255.0
    return np.expand_dims(img_array, axis=0)

st.title("Flower Classifier ðŸŒ¸")
st.write("Upload an image of a flower, and the model will predict its class.")

file = st.file_uploader("Upload Image", type=["jpg", "png"])

if file:
    image = Image.open(file).convert('RGB')
    st.image(image, caption="Uploaded Image", use_column_width=True)

    processed = preprocess_image(image)
    prediction = model.predict(processed)
    confidence = np.max(prediction)
    predicted_class = CLASS_NAMES[np.argmax(prediction)]

    st.markdown(f"### Prediction: **{predicted_class}**")
    st.markdown(f"### Confidence: **{confidence:.2f}**")

    # Optional: show top 3
    top_indices = prediction[0].argsort()[-3:][::-1]
    st.markdown("#### Top 3 Predictions:")
    for i in top_indices:
        st.write(f"{CLASS_NAMES[i]}: {prediction[0][i]:.2f}")